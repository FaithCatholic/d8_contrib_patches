diff --git a/.DS_Store b/.DS_Store
new file mode 100644
index 0000000..5008ddf
Binary files /dev/null and b/.DS_Store differ
diff --git a/src/Entity/MediaBundle.php b/src/Entity/MediaBundle.php
index 8833f82..44cb451 100644
--- a/src/Entity/MediaBundle.php
+++ b/src/Entity/MediaBundle.php
@@ -16,6 +16,7 @@ use Drupal\media_entity\MediaInterface;
  *   id = "media_bundle",
  *   label = @Translation("Media bundle"),
  *   handlers = {
+ *     "access" = "Drupal\media_entity\MediaBundleAccessControlHandler",
  *     "form" = {
  *       "add" = "Drupal\media_entity\MediaBundleForm",
  *       "edit" = "Drupal\media_entity\MediaBundleForm",
@@ -241,4 +242,11 @@ class MediaBundle extends ConfigEntityBundleBase implements MediaBundleInterface
     $this->new_revision = $new_revision;
   }
 
+  /**
+   * {@inheritdoc}
+   */
+  public function isLocked() {
+    return FALSE;
+  }
+
 }
diff --git a/src/MediaBundleAccessControlHandler.php b/src/MediaBundleAccessControlHandler.php
new file mode 100644
index 0000000..893f702
--- /dev/null
+++ b/src/MediaBundleAccessControlHandler.php
@@ -0,0 +1,39 @@
+<?php
+
+namespace Drupal\media_entity;
+
+use Drupal\Core\Access\AccessResult;
+use Drupal\Core\Entity\EntityAccessControlHandler;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\Core\Session\AccountInterface;
+
+/**
+ * Defines the access control handler for the media bundle entity type.
+ *
+ * @see \Drupal\media_entity\Entity\MediaBundle
+ */
+class MediaBundleAccessControlHandler extends EntityAccessControlHandler {
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function checkAccess(EntityInterface $entity, $operation, AccountInterface $account) {
+    switch ($operation) {
+      case 'view':
+        return AccessResult::allowedIfHasPermission($account, 'access content');
+
+      case 'delete':
+        if ($entity->isLocked()) {
+          return AccessResult::forbidden()->addCacheableDependency($entity);
+        }
+        else {
+          return parent::checkAccess($entity, $operation, $account)->addCacheableDependency($entity);
+        }
+        break;
+
+      default:
+        return parent::checkAccess($entity, $operation, $account);
+    }
+  }
+
+}
